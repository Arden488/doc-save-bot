import { bot } from "../utils/bot.js";
import { getData, isAllDataSet, setData } from "../services/appData.js";
import { getMessageType } from "../utils/message.js";
import { processFile } from "./file.js";
import { handleSend } from "./send.js";

function start(message) {
  // TODO: check if another status is in progress
  setData("status", "SAVE_LAST");
  bot.sendMessage(message.chat.id, "–û–ø–∏—à–∏, —á—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—à—å");
  setData("step", 1);
}

async function setFileOrLink(message) {
  const messageType = getMessageType(message);
  let link = null;

  if (messageType !== "file" && messageType !== "link") {
    bot.sendMessage(message.chat.id, "–ú–Ω–µ –Ω—É–∂–µ–Ω —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫–∞");
    return false;
  }

  if (messageType === "file") {
    link = await processFile(message.document);
  } else if (messageType === "link") {
    link = message.text;
  }

  setData("link", link);

  return true;
}

function setDescription(message) {
  if (!message.text) {
    bot.sendMessage(
      message.chat.id,
      "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω—É–∂–µ–Ω –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç"
    );
    return;
  }

  setData("description", message.text);

  bot.sendMessage(
    message.chat.id,
    "–°–ø–∞—Å–∏–±–æ, –≤—Å–µ —É—à–ª–æ –≤ –±–∞–∑—Éüëåüèª –î–∞ –ø—Ä–∏–±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å"
  );
}

async function handleSaveLast(message) {
  const lastMessage = getData("lastMessage");
  const step = getData("step");

  if (!lastMessage) {
    bot.sendMessage(
      message.chat.id,
      "–£ –º–µ–Ω—è –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –∏–ª–∏ —Ñ–∞–π–ª–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Ö –≤ —á–∞—Ç"
    );
    return;
  }

  switch (step) {
    case 0:
      const isLinkSet = await setFileOrLink(lastMessage);
      if (isLinkSet) {
        start(message);
      }
      break;
    case 1:
      setDescription(message);
      if (isAllDataSet()) {
        handleSend();
      }
      break;
    case 2:
      break;
  }
}

export default handleSaveLast;
